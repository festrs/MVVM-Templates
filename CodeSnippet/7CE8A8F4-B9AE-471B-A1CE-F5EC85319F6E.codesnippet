<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension CGFloat {
    static func random() -&gt; CGFloat {
        return CGFloat(arc4random()) / CGFloat(UInt32.max)
    }
}

extension UIColor {
    static func randomColor() -&gt; UIColor {
        let r = CGFloat.random()
        let g = CGFloat.random()
        let b = CGFloat.random()
        
        return UIColor(red: r, green: g, blue: b, alpha: 2.5)
    }
}

extension Date {
    func getComponent(_ component:NSCalendar.Unit) -&gt; Int?{
        if
            let cal: Calendar = Calendar.current{
            return (cal as NSCalendar).component(component, from: self)
        } else {
            return nil
        }
    }
}

extension NSNumber {
    func toMaskReais() -&gt;String?{
        let formatter = NumberFormatter()
        formatter.numberStyle = NumberFormatter.Style.currency
        formatter.locale = Locale(identifier: "pt_BR")
        return formatter.string(from: self)
    }
    func maskToCurrency() -&gt;String?{
        let formatter = NumberFormatter()
        formatter.numberStyle = NumberFormatter.Style.currencyAccounting
        return formatter.string(from: self)
    }
}

extension Int
{
    static func random(_ range: Range&lt;Int&gt; ) -&gt; Int
    {
        var offset = 0
        
        if range.lowerBound &lt; 0   // allow negative ranges
        {
            offset = abs(range.lowerBound)
        }
        
        let mini = UInt32(range.lowerBound + offset)
        let maxi = UInt32(range.upperBound   + offset)
        
        return Int(mini + arc4random_uniform(maxi - mini)) - offset
    }
}

func flatten&lt;T&gt;(_ a: [[T]]) -&gt; [T] {
    return a.reduce([]) {
        res, ca in
        return res + ca
    }
}

extension String
{
    func trim() -&gt; String
    {
        return self.trimmingCharacters(in: CharacterSet.whitespaces)
    }
    
    func removeSpaces() -&gt; String
    {
        return self.replacingOccurrences(of: " ", with: "")
    }
}

public protocol Groupable {
    func sameGroupAs(_ otherPerson: Self) -&gt; Bool
}


extension Collection where Self.Iterator.Element: Groupable {
    public func group() -&gt; [[Self.Iterator.Element]] {
        return self.groupBy { $0.sameGroupAs($1) }
    }
    
}

extension Collection where Self.Iterator.Element: Comparable {
    public func uniquelyGroupBy(_ grouper: (Self.Iterator.Element, Self.Iterator.Element) -&gt; Bool) -&gt; [[Self.Iterator.Element]] {
        let sorted = self.sorted()
        return sorted.groupBy(grouper)
    }
    
}

extension Collection {
    public typealias ItemType = Self.Iterator.Element
    public typealias Grouper = (ItemType, ItemType) -&gt; Bool
    
    public func groupBy(_ grouper: Grouper) -&gt; [[ItemType]] {
        var result : Array&lt;Array&lt;ItemType&gt;&gt; = []
        
        var previousItem: ItemType?
        var group = [ItemType]()
        
        for item in self {
            // Current item will be the next item
            defer {previousItem = item}
            
            // Check if it's the first item
            guard let previous = previousItem else {
                group.append(item)
                continue
            }
            
            if grouper(previous, item) {
                // Item in the same group
                group.append(item)
            } else {
                // New group
                result.append(group)
                group = [ItemType]()
                group.append(item)
            }
        }
        
        result.append(group)
        
        return result
    }
    
}

extension Sequence where Iterator.Element: Equatable {
    func containsObject(_ val: Self.Iterator.Element?) -&gt; Bool {
        if val != nil {
            for item in self {
                if item == val {
                    return true
                }
            }
        }
        return false
    }
}

extension Sequence where Iterator.Element: AnyObject {
    func containsObject(_ obj: Self.Iterator.Element?) -&gt; Bool {
        if obj != nil {
            for item in self {
                if item === obj {
                    return true
                }
            }
        }
        return false
    }
}

public extension Sequence {
    /// Categorises elements of self into a dictionary, with the keys given by keyFunc
    func categorise&lt;U : Hashable&gt;(_ keyFunc: (Iterator.Element) -&gt; U) -&gt; [U:[Iterator.Element]] {
        var dict: [U:[Iterator.Element]] = [:]
        for el in self {
            let key = keyFunc(el)
            if case nil = dict[key]?.append(el) { dict[key] = [el] }
        }
        return dict
    }
}


extension Date {
    func yearsFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.year, from: date, to: self, options: []).year!
    }
    func monthsFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.month, from: date, to: self, options: []).month!
    }
    func weeksFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.weekOfYear, from: date, to: self, options: []).weekOfYear!
    }
    func daysFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.day, from: date, to: self, options: []).day!
    }
    func hoursFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.hour, from: date, to: self, options: []).hour!
    }
    func minutesFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.minute, from: date, to: self, options: []).minute!
    }
    func secondsFrom(_ date:Date) -&gt; Int{
        return (Calendar.current as NSCalendar).components(.second, from: date, to: self, options: []).second!
    }
    func offsetFrom(_ date:Date) -&gt; String {
        if yearsFrom(date)   &gt; 0 { return "\(yearsFrom(date))y"   }
        if monthsFrom(date)  &gt; 0 { return "\(monthsFrom(date))M"  }
        if weeksFrom(date)   &gt; 0 { return "\(weeksFrom(date))w"   }
        if daysFrom(date)    &gt; 0 { return "\(daysFrom(date))d"    }
        if hoursFrom(date)   &gt; 0 { return "\(hoursFrom(date))h"   }
        if minutesFrom(date) &gt; 0 { return "\(minutesFrom(date))m" }
        if secondsFrom(date) &gt; 0 { return "\(secondsFrom(date))s" }
        return ""
    }
}

extension UIView {
    class func loadFromNibNamed(_ nibNamed: String, bundle : Bundle? = nil) -&gt; UIView? {
        return UINib(
            nibName: nibNamed,
            bundle: bundle
            ).instantiate(withOwner: nil, options: nil)[0] as? UIView
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>7CE8A8F4-B9AE-471B-A1CE-F5EC85319F6E</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>extensions swift 3.0</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
