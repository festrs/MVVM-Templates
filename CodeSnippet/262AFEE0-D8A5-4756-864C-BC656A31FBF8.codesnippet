<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>bindable</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Foundation

//https://www.swiftbysundell.com/posts/bindable-values-in-swift
class Bindable&lt;Value&gt; {
    private var observations = [(Value) -&gt; Bool]()
    private(set) var lastValue: Value?
    private var queue: DispatchQueue = DispatchQueue.main

    init(_ value: Value? = nil) {
        lastValue = value
    }
}

extension Bindable {
    func update(with value: Value) {
        lastValue = value
        observations = observations.filter { $0(value) }
    }

    func clearObservations() {
      observations.removeAll()
    }
    
    func addObservation&lt;O: AnyObject&gt;(
        for object: O,
        handler: @escaping (O, Value) -&gt; Void
        ) {
        // If we already have a value available, we'll give the
        // handler access to it directly.
        lastValue.map {
            callObserver(for: object, with: $0, handler: handler)
        }

        // Each observation closure returns a Bool that indicates
        // whether the observation should still be kept alive,
        // based on whether the observing object is still retained.
        observations.append { [weak object] value in
            guard let object = object else {
                return false
            }
            self.callObserver(for: object, with: value, handler: handler)
            return true
        }
    }

    private func callObserver&lt;O: AnyObject&gt;(for object: O,
                                            with value: Value,
                                            handler: @escaping (O, Value) -&gt; Void) {
        //Jumping queues https://www.swiftbysundell.com/posts/reducing-flakiness-in-swift-tests
        if Thread.isMainThread {
            handler(object, value)
        } else {
            queue.async {
                  handler(object, value)
            }
        }
    }
}

extension Bindable {
    @discardableResult
    func receive(on queue: DispatchQueue) -&gt; Bindable {
        self.queue = queue
        return self
    }

    func bind&lt;O: AnyObject&gt;(to objectKeyPath: ReferenceWritableKeyPath&lt;O, Value&gt;,
                            on object: O) {
        addObservation(for: object) { (object, value) in
            object[keyPath: objectKeyPath] = value
        }
    }

    func bind&lt;O: AnyObject, T&gt;(
        _ sourceKeyPath: KeyPath&lt;Value, T&gt;,
        to object: O,
        _ objectKeyPath: ReferenceWritableKeyPath&lt;O, T&gt;
        ) {
        addObservation(for: object) { object, observed in
            let value = observed[keyPath: sourceKeyPath]
            object[keyPath: objectKeyPath] = value
        }
    }

    func bind&lt;O: AnyObject, T&gt;(
        _ sourceKeyPath: KeyPath&lt;Value, T&gt;,
        to object: O,
        _ objectKeyPath: ReferenceWritableKeyPath&lt;O, T?&gt;
        ) {
        addObservation(for: object) { object, observed in
            let value = observed[keyPath: sourceKeyPath]
            object[keyPath: objectKeyPath] = value
        }
    }

    func bind&lt;O: AnyObject, T, R&gt;(
        _ sourceKeyPath: KeyPath&lt;Value, T&gt;,
        to object: O,
        _ objectKeyPath: ReferenceWritableKeyPath&lt;O, R?&gt;,
        transform: @escaping (T) -&gt; R?
        ) {
        addObservation(for: object) { object, observed in
            let value = observed[keyPath: sourceKeyPath]
            let transformed = transform(value)
            object[keyPath: objectKeyPath] = transformed
        }
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>262AFEE0-D8A5-4756-864C-BC656A31FBF8</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Classe bindable to create link bettewn classes</string>
	<key>IDECodeSnippetTitle</key>
	<string>Bindable</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
